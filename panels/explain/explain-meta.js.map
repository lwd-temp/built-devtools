{"version":3,"file":"explain-meta.js","sourceRoot":"","sources":["../../../../../../front_end/panels/explain/explain-meta.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright 2023 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport * as i18n from '../../core/i18n/i18n.js';\nimport * as Root from '../../core/root/root.js';\nimport * as UI from '../../ui/legacy/legacy.js';\n\nconst UIStrings = {\n  /**\n   *@description Title of an action in the debugger tool to explain selection.\n   */\n  explainCode: '✨ Explain selected code',\n  /**\n   *@description Title of an action to explain a console message.\n   */\n  explainConsoleMessage: '✨ Explain console message',\n};\nconst str_ = i18n.i18n.registerUIStrings('panels/explain/explain-meta.ts', UIStrings);\nconst i18nLazyString = i18n.i18n.getLazilyComputedLocalizedString.bind(undefined, str_);\n\nif (Root.Runtime.Runtime.queryParam('enableAida') === 'true') {\n  const Sources = await import('../sources/sources.js');\n  const Workspace = await import('../../models/workspace/workspace.js');\n\n  UI.ActionRegistration.registerActionExtension({\n    actionId: 'explain.code',\n    category: UI.ActionRegistration.ActionCategory.EXPLAIN,\n    async loadActionDelegate() {\n      const Explain = await import('./explain.js');\n      return Explain.ActionDelegate.instance();\n    },\n    title: i18nLazyString(UIStrings.explainCode),\n    contextTypes() {\n      return [Sources.UISourceCodeFrame.UISourceCodeFrame];\n    },\n  });\n\n  class ExplainCodeContextProvider implements UI.ContextMenu.Provider {\n    appendApplicableItems(_event: Event, contextMenu: UI.ContextMenu.ContextMenu, _target: Object): void {\n      contextMenu.debugSection().appendAction('explain.code');\n    }\n  }\n\n  UI.ContextMenu.registerProvider({\n    contextTypes() {\n      return [Workspace.UISourceCode.UISourceCode];\n    },\n    async loadProvider() {\n      return new ExplainCodeContextProvider();\n    },\n  });\n\n  const Console = await import('../console/console.js');\n\n  UI.ActionRegistration.registerActionExtension({\n    actionId: 'explain.consoleMessage',\n    category: UI.ActionRegistration.ActionCategory.EXPLAIN,\n    async loadActionDelegate() {\n      const Explain = await import('./explain.js');\n      return Explain.ActionDelegate.instance();\n    },\n    title: i18nLazyString(UIStrings.explainConsoleMessage),\n    contextTypes() {\n      return [Console.ConsoleViewMessage.ConsoleViewMessage];\n    },\n  });\n\n  class ExplainConsoleMessageContextProvider implements UI.ContextMenu.Provider {\n    appendApplicableItems(_event: Event, contextMenu: UI.ContextMenu.ContextMenu, _target: Object): void {\n      contextMenu.debugSection().appendAction('explain.consoleMessage');\n    }\n  }\n\n  UI.ContextMenu.registerProvider({\n    contextTypes() {\n      return [Console.ConsoleViewMessage.ConsoleViewMessage];\n    },\n    async loadProvider() {\n      return new ExplainConsoleMessageContextProvider();\n    },\n  });\n}\n"]}